AWSTemplateFormatVersion: 2010-09-09
Resources: 
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0aeeebd8d2ab47354
      InstanceType: t2.micro
      Monitoring: True
      SecurityGroupIds: [ec2AllowHTTPOnly]
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            echo $INSTANCE_ID >> /var/www/html/index.html
            reboot
      Tags:
        -
          Key: Name
          Value: Instance_1
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            response = {
              'isBase64Encoded': False,
              'statusCode': 200,
              'body': 'HELLO WORLD!'
            }
          return response
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
    
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balance allow port 80 traffic
      VpcId: vpc-80d841fd
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: TCP
        ToPort: 80

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      SubnetMappings:
        - SubnetId:
            subnet-5f81cf00
        - SubnetId:
            subnet-357a3753

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 80

  LoadBalancerListenerRule: 
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref LoadBalancerTargetGroupEC2
                Weight: 10

      Conditions:
        - Field: path-pattern
          Values:
            - foo
      Priority: 10


  LoadBalancerTargetGroupEC2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Protocol: HTTP
      Port: 80
      VpcId: vpc-80d841fd
      Targets:
        - Id: !Ref EC2Instance

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn

Outputs:
   DNSOfALB:
    Description: DNS of ALB
    Value: !GetAtt LoadBalancer.DNSName